<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-26T12:19:35.601Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YK Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库进阶</title>
    <link href="http://yoursite.com/2019/12/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/12/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6/</id>
    <published>2019-12-25T02:50:03.000Z</published>
    <updated>2019-12-26T12:19:35.601Z</updated>
    
    <content type="html"><![CDATA[<h4 id="外键和E-R图"><a href="#外键和E-R图" class="headerlink" title="外键和E.R图"></a>外键和E.R图</h4><h5 id="约束管理"><a href="#约束管理" class="headerlink" title="约束管理"></a>约束管理</h5><ol><li>添加约束</li></ol><p>添加普通约束的方式有两种，一种是创建表的时候直接给字段添加相应的约束，另一种是通过修改表的方式添加约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 创建表的时候添加约束</span><br><span class="line">-- 建表的时候可以在字段类型后面加一个或者多个约束</span><br><span class="line"></span><br><span class="line">-- 2.通过添加约束索引的方式添加约束</span><br><span class="line">-- alter table 表名 add constraint 索引名 约束(字段);</span><br><span class="line">-- 说明: 索引名 - 自己随便命名;  约束 - 当前想要添加的约束(但是只支持唯一约束、主键约束和外键约束)</span><br><span class="line"></span><br><span class="line">-- 示例:</span><br><span class="line">alter table t_teacher add constraint uni_tel UNIQUE(teatel);</span><br></pre></td></tr></table></figure><ol start="2"><li>删除约束</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop index 约束索引;</span><br><span class="line"></span><br><span class="line">-- 示例:</span><br><span class="line">alter table t_teacher drop index uni_tel;</span><br></pre></td></tr></table></figure><h5 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h5><ol><li><p>什么是外键：表中的某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键<br> 多对一的外键的添加： 将外键添加到多的一方对应的表中<br> 一对一的外键的添加： 将外键随便添加到哪一方，同时添加值唯一约束<br> 多对多的外键的添加： 关系型数据库中，两张表没法实现多多的关系，需要一个中间表。(中间表有两个外键分别参照多多的两个表的主键)</p></li><li><p>添加外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名1 add constraint 外键约束索引名 foreign key (字段1) references 表名2 (字段2);</span><br><span class="line">-- 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2</span><br><span class="line">-- 也可在创建表的时候就添加外键约束</span><br></pre></td></tr></table></figure></li><li><p>删除外键约束</p></li></ol><p><code>alter table 表名 drop foreign key 外键索引名;</code></p><h5 id="E-R图"><a href="#E-R图" class="headerlink" title="E.R图"></a>E.R图</h5><p>E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。</p><p>它是描述现实世界关系概念模型的有效方法。是表示概念关系模型的一种方式。用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体型”连接起来。</p><h4 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h4><h5 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h5><p>max() / min() / sum() / avg() / count()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT max(score) as max_score FROM tb_score;   -- 获取tb_score表中字段score的最大值</span><br><span class="line">SELECT min(score) as min_score FROM tb_score;   -- 获取tb_score表中字段score的最小值</span><br><span class="line">SELECT sum(score) as sum_score FROM tb_score;   -- 获取tb_score表中字段score的和</span><br><span class="line">SELECT AVG(score) as avg_score FROM tb_score;   -- 获取tb_score表中字段score的平均值</span><br><span class="line">SELECT COUNT(score) as count_score FROM tb_score WHERE score&gt;80;  -- 统计tb_score表中字段score大于80的个数</span><br></pre></td></tr></table></figure><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- SELECT 字段操作  FROM 表名 WHERE 条件 GROUP BY(字段2);</span><br><span class="line"></span><br><span class="line">-- 将指定表中满足条件的记录按照字段2的进行分组(值是一样的在一个组里面), 然后再讲每个分组作为整体按照指定字段进行指定聚合操作</span><br><span class="line">-- 注意:a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合   b.分组的时候where要放到分组前对需要分组的数据进行筛选</span><br><span class="line"></span><br><span class="line">select stuid, avg(score) from tb_score group by(stuid);</span><br><span class="line"></span><br><span class="line">-- having: 分组的时候，在分组后用having代替where来对分组后的数据进行筛选！！！</span><br><span class="line"></span><br><span class="line">select stuid, max(score) from tb_score group by(stuid) having max(score)&gt;90;</span><br><span class="line">select stuid, avg(score) from tb_score group by(stuid) having avg(score)&gt;80;</span><br></pre></td></tr></table></figure><h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5><p><code>SELECT DISTINCT addr FROM t_student;</code></p><h5 id="限制和分页"><a href="#限制和分页" class="headerlink" title="限制和分页"></a>限制和分页</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 限制: select * from 表名 limit N; -查询的时候只获取前N条数据</span><br><span class="line">-- 偏移: select * from 表名 limit M offset N;  -  跳过前N获取M条数据</span><br><span class="line">select * from tb_record limit 5;</span><br><span class="line">select * from tb_record limit 4 offset 3; --  跳过前3条获取4条数据</span><br></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>子查询：将一个查询的结果作为另外一个查询的条件或者查询对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 1.将查询结果作为另外一个查询的条件</span><br><span class="line"></span><br><span class="line">-- 获取成绩大于90分的学生姓名</span><br><span class="line">select stuname from tb_student where stuid in </span><br><span class="line">(select stuid from tb_score where score&gt;90);</span><br><span class="line"></span><br><span class="line">-- 2.将一个查询的结果作为查询对象提供给另外一个查询。但是第一个查询结果需要重命名 </span><br><span class="line">select score from (SELECT stuid,score from tb_score where score&gt;80) as t2;</span><br></pre></td></tr></table></figure><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><ol><li>直接连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- select * from 表名1,表名2,表名3 where 连接条件 查询条件;</span><br><span class="line"></span><br><span class="line">-- 查询所有学生的名字和学院名字</span><br><span class="line">select stuname, collname from tb_student, tb_college where tb_student.colid&#x3D;tb_college.collid;</span><br></pre></td></tr></table></figure><ol start="2"><li>内连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- SELECT * FROM 表1 inner join 表2 on 表2的连接条件 inner join 表3 on 表3的连接条件 ...;</span><br><span class="line"></span><br><span class="line">-- 查询所有学生的名字和学院名字</span><br><span class="line">select stuname, collname from tb_student inner join tb_college </span><br><span class="line">on tb_student.colid&#x3D;tb_college.collid;</span><br></pre></td></tr></table></figure><ol start="3"><li>外连接<br>外连接分为左外连接、右外连接和全连接， 但是在MySQL中支持左外连接和右外连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 左外连接：将左表中对应字段的所有数据取出，然后再对应的右表中字段的值，如果右表对应的值不存在结果就为null </span><br><span class="line">-- 右外连接：将右表中对应字段的所有数据取出，然后再对应的左表中字段的值，如果左表对应的值不存在结果就为null </span><br><span class="line">select * from 表1 left join 表2 on 连接条件;</span><br><span class="line">select * from 表1 right join 表2 on 连接条件;</span><br><span class="line"></span><br><span class="line">-- 查询所有学生的姓名和选课数量(左外连接和子查询)</span><br><span class="line">select stuname, ifnull(c_count,0) from tb_student as t1 left join </span><br><span class="line">(select sid, count(cid) as c_count from tb_record group by (sid)) as t2 on stuid&#x3D;sid;</span><br><span class="line">-- 如果不用外连接，没有选课的学生选不出来！！</span><br></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>完成一个任务需要执行多条sql，但是要求这多个操作中只要有一个操作失败，这个任务就失败，数据全部还原；所有的操作都成功，整个任务才成功的时候就使用事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 开启事务环境</span><br><span class="line">begin;</span><br><span class="line"></span><br><span class="line">-- ...（需要执行的多个操作对应的sql语句）</span><br><span class="line"></span><br><span class="line">-- 提交事务(只有begin到commit之间的所有的sql都执行成功，才会执行commit; 否则执行rollback)</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 事务回滚(放弃beigin到commit之间执行成功的所有sql语句的结果)</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。</p><p>使用视图可以获得以下好处：</p><ul><li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li><li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li><li>重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li><li>视图可以返回与实体数据表不同格式的数据，</li></ul><ol><li>创建视图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名 as sql查询语句;</span><br><span class="line"></span><br><span class="line">-- 示例:</span><br><span class="line">create view vw_student</span><br><span class="line">as SELECT * FROM tb_student;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用视图  - 视图在用的时候可以直接当成表来使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 示例:</span><br><span class="line">select * FROM vw_student;</span><br><span class="line"></span><br><span class="line">select stuname, collname from vw_student, tb_college where vw_student.colid&#x3D;tb_college.collid;</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引相当于书本的目录，为表创建索引可以加速查询（用空间换时间）。</p><p>索引虽然很好，但是不能滥用：</p><ul><li><p>索引会占用额外的空间</p></li><li><p>索引会让增删改变得更慢</p></li></ul><p>如果哪个列经常被用于查询的筛选条件那么就应该在这个列上建立索引。</p><p>主键上有默认索引(唯一索引)</p><ol><li>创建索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- create index 索引名 on 表名 (字段);    -- 给指定表的指定字段添加索引</span><br><span class="line">-- create unique index 索引名 on 表名 (字段);  -- 给指定表的指定字段添加唯一索引</span><br><span class="line"></span><br><span class="line">-- 示例:</span><br><span class="line">create index idx_stuname on tb_student(stuname);</span><br><span class="line">create unique index idx_stuname on tb_student(stuname);</span><br></pre></td></tr></table></figure><ol start="2"><li>删除索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- alter table 表名 drop index 索引名; -- 删除指定索引，唯一索引也是这样删</span><br><span class="line"></span><br><span class="line">-- 示例: </span><br><span class="line">alter table tb_student drop index idx_stuname;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- explain： 获取执行计划</span><br><span class="line"></span><br><span class="line">explain select * from tb_student where stuid&#x3D;110;</span><br><span class="line">explain select * from tb_student where stuname&#x3D;&#39;张三&#39;;</span><br><span class="line"></span><br><span class="line">-- 注意：模糊查询如果以%和_开头，索引无效!!!</span><br><span class="line">explain select * from tb_student where stuname&#x3D;&#39;%三&#39;;  -- error</span><br><span class="line">explain select * from tb_student where stuname&#x3D;&#39;_三&#39;;  -- error</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;外键和E-R图&quot;&gt;&lt;a href=&quot;#外键和E-R图&quot; class=&quot;headerlink&quot; title=&quot;外键和E.R图&quot;&gt;&lt;/a&gt;外键和E.R图&lt;/h4&gt;&lt;h5 id=&quot;约束管理&quot;&gt;&lt;a href=&quot;#约束管理&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>shell编程基础</title>
    <link href="http://yoursite.com/2019/12/21/shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/21/shell%E7%BC%96%E7%A8%8B/</id>
    <published>2019-12-21T08:57:08.202Z</published>
    <updated>2019-12-24T15:29:50.445Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h4><p>Shell脚本，是一种为shell编写的脚本程序。</p><p>Shell编程跟JavaScript、Python编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux的Shell种类有很多，我们主要用的是Bourne Shell(/usr.bin/sh或/bin/sh)</p><h5 id="1-创建shell文件"><a href="#1-创建shell文件" class="headerlink" title="1.创建shell文件"></a>1.创建shell文件</h5><p>原则上shell程序可以写在任何文件中，但是一般会在shell文件后加后缀.sh表示当前文件是一个shell文件</p><p>shell需要可执行权限，所以创建好的shell文件需要添加x权限</p><h5 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h5><h6 id="1）注释"><a href="#1）注释" class="headerlink" title="1）注释"></a>1）注释</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单行注释</span></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">多行注释1</span><br><span class="line">多行注释2</span><br><span class="line">多行注释3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h6 id="2）输出和输入"><a href="#2）输出和输入" class="headerlink" title="2）输出和输入"></a>2）输出和输入</h6><p>echo指令就相当于python中的print函数(默认会换行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo  输出内容  </span><br><span class="line">echo -n 输出内容     # 输出的时候不换行</span><br></pre></td></tr></table></figure><p>printf指令（输出不能换行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> 输出内容</span><br></pre></td></tr></table></figure><p>输入指令:  read 变量名    – 输入内容，并且将输入的结果保存在变量中</p><h6 id="3）变量"><a href="#3）变量" class="headerlink" title="3）变量"></a>3）变量</h6><p>a. 声明变量的语法:   变量名=值</p><p>说明:  a. 变量名和=, =和值之间不能有空格</p><p>​       b. 变量名的要求和python变量名要求一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name='小明'</span><br><span class="line">age=18</span><br><span class="line">stu_name=小红</span><br></pre></td></tr></table></figure><p>b. 使用变量: </p><p>​         $变量</p><p>​         ${变量}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=18</span><br><span class="line">echo $age</span><br><span class="line">age2=$&#123;age&#125;</span><br></pre></td></tr></table></figure><p>c. 只读变量</p><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gender='男'</span><br><span class="line">readonly gender</span><br><span class="line">gender='女'     # test.sh: line 17: gender: readonly variable</span><br></pre></td></tr></table></figure><p>d. 删除变量</p><p>使用 unset 命令可以删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name='yuting'</span><br><span class="line">unset name</span><br></pre></td></tr></table></figure><h6 id="4）获取linux指令结果"><a href="#4）获取linux指令结果" class="headerlink" title="4）获取linux指令结果"></a>4）获取linux指令结果</h6><p>在shell脚本中可以直接写linux指令，在执行shell脚本的时候这些指令可以直接获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls     # ls指令</span><br><span class="line">ls  -lh      # ls指令，并且设置参数</span><br><span class="line">touch a.txt    # 创建a.txt文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指令结果: 变量=$(指令)  /   变量=`指令`</span></span><br><span class="line">lsresult=$(ls)    #将ls指令的结果保存到变量lsresult中</span><br><span class="line">currnet_path=`pwd`</span><br></pre></td></tr></table></figure><h5 id="3-shell字符串"><a href="#3-shell字符串" class="headerlink" title="3.shell字符串"></a>3.shell字符串</h5><p>shell中的字符串可以用单引号也可以使用双引号甚至可以不用引号。但是单引号中不能出现单引号字符，加\也不行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1='abc'</span><br><span class="line">str2="abc"</span><br><span class="line">str3=abc</span><br><span class="line">str4='abc\n123'#支持转义字符,但是不支持编码字符</span><br><span class="line">str5="abc\n123"</span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">str6="年龄是$age"    #双引号里面可以出现变量,单引号不行</span><br></pre></td></tr></table></figure><h6 id="1）字符串拼接"><a href="#1）字符串拼接" class="headerlink" title="1）字符串拼接"></a>1）字符串拼接</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1="hello"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">单引号拼接</span></span><br><span class="line">str2=''$&#123;str1&#125;',world!'</span><br><span class="line">str3=''$str1',world!'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">双引号拼接</span></span><br><span class="line">str4="$&#123;str1&#125;,world!"</span><br><span class="line">str5=""$str1",world!"</span><br></pre></td></tr></table></figure><h6 id="2）获取字符串长度"><a href="#2）获取字符串长度" class="headerlink" title="2）获取字符串长度"></a>2）获取字符串长度</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1="abcd"</span><br><span class="line">echo $&#123;#str1&#125;    # 输出4</span><br></pre></td></tr></table></figure><h6 id="3）字符串提取"><a href="#3）字符串提取" class="headerlink" title="3）字符串提取"></a>3）字符串提取</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:个数   --从字符串中指定下标开始获取指定个数字符,返回一个新的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:1   -- 获取字符串中指定下标对应的字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标     -- 从指定下标开始获取到字符串最后</span></span><br><span class="line"></span><br><span class="line">string='hello world'</span><br><span class="line">echo $&#123;string:1:4&#125;    # ello</span><br></pre></td></tr></table></figure><h5 id="4-shell数组"><a href="#4-shell数组" class="headerlink" title="4.shell数组"></a>4.shell数组</h5><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数组名=(元素1 元素2 元素3 ...)</span></span><br><span class="line">names=(小明 小红 大黄 Tom)</span><br><span class="line">names2=(</span><br><span class="line">'小明'</span><br><span class="line">'小红'</span><br><span class="line">'大黄'</span><br><span class="line">'Tom'</span><br><span class="line">)</span><br><span class="line">names3[0]=小明</span><br><span class="line">names3[1]=小红</span><br><span class="line">names3[2]=大黄</span><br><span class="line">names3[3]=Tom</span><br></pre></td></tr></table></figure><h6 id="1）获取数组元素：-数组-下标"><a href="#1）获取数组元素：-数组-下标" class="headerlink" title="1）获取数组元素：${数组[下标]}"></a>1）获取数组元素：${数组[下标]}</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;names[1]&#125;    # 小红</span><br></pre></td></tr></table></figure><h6 id="2）获取数组的长度"><a href="#2）获取数组的长度" class="headerlink" title="2）获取数组的长度"></a>2）获取数组的长度</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums=(100 200 300 400)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组长度</span></span><br><span class="line">length=$&#123;#nums[@]&#125;</span><br><span class="line">length=$&#123;#nums[*]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组指定下标对应的元素的长度</span></span><br><span class="line">length2=$&#123;#num[n]&#125;</span><br></pre></td></tr></table></figure><h5 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h5><p>shell中支持的运算符有:  算术运算符、关系运算符、布尔运算符、字符串运算符</p><h6 id="1）算术运算符：-，-，-，-，"><a href="#1）算术运算符：-，-，-，-，" class="headerlink" title="1）算术运算符：+，-，*，/，%"></a>1）算术运算符：+，-，*，/，%</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想要在shell完成数值运算，运算的语法:  `expr 运算表达式`; 并且运算符两边必须加空格</span></span><br><span class="line">re1=10+20</span><br><span class="line">echo $&#123;re1&#125;    # 10+20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.加法运算</span></span><br><span class="line">re2=`expr 10 + 20`    </span><br><span class="line">echo $&#123;re2&#125;    # 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.减法运算</span></span><br><span class="line">re3=`expr 10 - 20`</span><br><span class="line">echo $&#123;re3&#125;   # -10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.乘法运算</span></span><br><span class="line">re4=`expr 10 \* 20`   # 注意:使用*作为乘法运算符的时候需要前面加\</span><br><span class="line">echo $&#123;re4&#125; # 200</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.除法运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小数除法运算: `<span class="built_in">echo</span> <span class="string">"scale=小数点位数;数值1 / 数值2"</span>|bc`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整数除法运算: `expr 数值1 / 数值2`</span></span><br><span class="line">re5=`echo "scale=2;7 / 3"|bc`</span><br><span class="line">echo $re5</span><br><span class="line"></span><br><span class="line">re6=`expr 5 / 2`</span><br><span class="line">echo $re6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.求余数</span></span><br><span class="line">re7=`expr 10 % 3`</span><br><span class="line"></span><br><span class="line">re8=`echo "10.2 + 5.1"|bc`</span><br><span class="line">echo $re8</span><br></pre></td></tr></table></figure><h6 id="2）-关系运算符-比较运算符-，比较的是数字大小"><a href="#2）-关系运算符-比较运算符-，比较的是数字大小" class="headerlink" title="2） 关系运算符(比较运算符)，比较的是数字大小"></a>2） 关系运算符(比较运算符)，比较的是数字大小</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -eq  ---  等于,相当于 ==</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ne  ---  不等于,相当于!=</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -gt  ---  大于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -lt  ---  小于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ge  ---  大于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -le  ---  小于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用语法: [ 值1 关系运算符 值2 ]</span></span><br><span class="line">a=100</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关系运算符要配合<span class="keyword">if</span>语句或者循环语句使用</span></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">echo a大于b</span><br><span class="line">else </span><br><span class="line">echo a不大于b</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h6 id="3）布尔运算符-逻辑运算符"><a href="#3）布尔运算符-逻辑运算符" class="headerlink" title="3）布尔运算符(逻辑运算符)"></a>3）布尔运算符(逻辑运算符)</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> !    --  逻辑非运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o   --  逻辑或运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a   --  逻辑与运算</span></span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">score=95</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参加比赛的条件：分数大于90分并且年龄大于等于18岁</span></span><br><span class="line">if [ $age -ge 18 -a $score -gt 90 ]</span><br><span class="line">then</span><br><span class="line">echo 可以参见比赛</span><br><span class="line">else</span><br><span class="line">echo 不能参加比赛</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h6 id="4）字符串运算符"><a href="#4）字符串运算符" class="headerlink" title="4）字符串运算符"></a>4）字符串运算符</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 = 字符串2 ]    -- 判断两个字符串是否相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 != 字符串2 ]   -- 不相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -z 字符串]   -- 判断字符串长度是否为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -n <span class="string">"字符串"</span> ]    -- 判断字符串长度是否不为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ $ 字符串 ]   -- 判断字符串是否是空串</span></span><br><span class="line"></span><br><span class="line">a="abc"</span><br><span class="line">b="123"</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">    echo a和b相等</span><br><span class="line">else</span><br><span class="line">    echo a和b不相等</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">a=""</span><br><span class="line">if [ -n "$&#123;a&#125;" ]</span><br><span class="line">then</span><br><span class="line">    echo a的长度不为0</span><br><span class="line">else</span><br><span class="line">    echo a的长度为0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6. if语句"></a>6. if语句</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">语法1：</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">语法2:</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">else</span><br><span class="line">    不满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法3：</span><br><span class="line">if 条件语句1</span><br><span class="line">then </span><br><span class="line">    代码块1</span><br><span class="line">elif 条件语句2</span><br><span class="line">then</span><br><span class="line">    代码块2</span><br><span class="line">elif 条件语句3</span><br><span class="line">then </span><br><span class="line">    代码块3</span><br><span class="line">else</span><br><span class="line">    代码块N</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7. for循环"></a>7. for循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">for 变量 in 序列</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">for char in "hello word"</span><br><span class="line">do</span><br><span class="line">    echo 循环体char: $&#123;char&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历数组</span></span><br><span class="line">arr1=(10 20 "abc")</span><br><span class="line">for x in $&#123;arr1[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo 循环体2x: $&#123;x&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历多个值</span></span><br><span class="line">for x in 10 20 "你好" 123</span><br><span class="line">do</span><br><span class="line">    echo 循环体3：$&#123;x&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8. while循环"></a>8. while循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">while 条件语句</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">str1="helloWorld!"</span><br><span class="line">index=0</span><br><span class="line">len=$&#123;#str1&#125;</span><br><span class="line">while [ $index -lt $len ]</span><br><span class="line">do</span><br><span class="line">    echo $&#123;str1:$&#123;index&#125;:1&#125;</span><br><span class="line">    index=`expr $&#123;index&#125; + 1`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+2+3+...+100</span></span><br><span class="line">num=1</span><br><span class="line">sum=0</span><br><span class="line">while [ $&#123;num&#125; -le 100 ]</span><br><span class="line">do</span><br><span class="line">    sum=`expr $&#123;sum&#125; + $&#123;num&#125;`</span><br><span class="line">    num=`expr $&#123;num&#125; + 1`</span><br><span class="line">done</span><br><span class="line">echo 1+2+3+...+100 = $&#123;sum&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 死循环</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "请输入一个数字:" num</span><br><span class="line">    if [ $&#123;num&#125; == 100 ]</span><br><span class="line">    then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h5><h6 id="1）函数的声明和调用"><a href="#1）函数的声明和调用" class="headerlink" title="1）函数的声明和调用"></a>1）函数的声明和调用</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.函数的声明</span></span><br><span class="line">声明的语法：</span><br><span class="line">函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用函数语法:  函数名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明函数</span></span><br><span class="line">func1()&#123;</span><br><span class="line">    echo 你好函数1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">调用函数</span></span><br><span class="line">func1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.有参数的函数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 声明的时候不需要形参, 直接在函数体中通过<span class="string">'$&#123;N&#125;'</span>来获取第N个实参</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用的时候:  函数名 实参1 实参2 实参3 ...</span></span><br><span class="line">func2()&#123;</span><br><span class="line">    echo 函数2被调用</span><br><span class="line">    echo 第一个参数: $&#123;1&#125;</span><br><span class="line">    echo 第二个参数: $&#123;2&#125;</span><br><span class="line">    echo 第三个参数: $&#123;3&#125; </span><br><span class="line">&#125;</span><br><span class="line">func2 10 20 "abc"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.函数的返回值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">return</span> 数字   - 数字的范围是0~255</span></span><br><span class="line">func3()&#123;</span><br><span class="line">    echo 函数3被调用</span><br><span class="line">    return 256</span><br><span class="line">    #a=`expr 100 + 200`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func3</span><br><span class="line">echo $&#123;?&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;shell编程&quot;&gt;&lt;a href=&quot;#shell编程&quot; class=&quot;headerlink&quot; title=&quot;shell编程&quot;&gt;&lt;/a&gt;shell编程&lt;/h4&gt;&lt;p&gt;Shell脚本，是一种为shell编写的脚本程序。&lt;/p&gt;
&lt;p&gt;Shell编程跟JavaScrip
      
    
    </summary>
    
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库入门</title>
    <link href="http://yoursite.com/2019/12/21/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/12/21/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8/</id>
    <published>2019-12-21T08:56:15.121Z</published>
    <updated>2019-12-26T11:40:22.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关系数据库概述"><a href="#关系数据库概述" class="headerlink" title="关系数据库概述"></a>关系数据库概述</h3><ol><li>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</li></ol><ul><li>将数据写入到文件；缺点：不方便取出数据和查找数据 。</li><li>用Excel表格；缺点：不方便查找和修改数据。</li><li>数据库管理系统</li></ul><ol start="2"><li><p>数据库 - 数据的集散地（仓库）<br>  优点：不仅可以保存数据，更重要的是能够很好的管理数据，方便将来对数据的检索，大多数的数据库都能够保证数据的一致性、完整性并减少数据的冗余</p></li><li><p>数据库发展史 -  网状数据库、层次数据库、关系数据库、NoSQL数据库。</p></li></ol><blockquote><p>1970s，IBM的研究员E.F.Codd在Communication of the ACM上发表了名为A Relational Model of Data for Large Shared Data Banks的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p></blockquote><ol start="4"><li>关系数据库的特点</li></ol><ul><li>理论基础：集合论和关系代数。</li><li>具体表象：用二维表（行 - 记录  列 - 字段）组织数据。</li><li>理论基础：集合论和关系代数。</li></ul><h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><p>MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。</p><p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。</p><p>甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。</p><p><strong>安装和配置</strong>（在CentOS7 Linux环境下）</p><ul><li>MySQL有一个分支版本名叫MariaDB，它们的底层库是冲突的，要安装MySQL,必须先保证系统中没有MariaDB相关的文件。如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。</li></ul><p><code>yum list installed | grep mariadb | awk &#39;{print $1}&#39; | xargs yum erase -y</code></p><ul><li>下载</li></ul><p><code>wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></p><ul><li>解归档</li></ul><p><code>tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></p><ul><li>接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>接下来启动MySQL服务器</li></ul><p>启动服务器：<br><code>systemctl start mysqld / service mysqld start</code><br>关闭服务器：<br><code>systemctl stop mysqld / service mysqld stop</code><br>重启服务器：<br><code>systemctl restart mysqld</code></p><ul><li>查看运行状态和网络状态</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">status mysqld</span></span><br><span class="line"><span class="attr">netstat</span> <span class="string">-ntlp | grep mysql</span></span><br></pre></td></tr></table></figure><ul><li>在日志文件中找出root用户的临时密码</li></ul><p><code>cat /var/log/mysqld.log | grep &quot;A temporary password&quot;</code></p><ul><li>通过MySQL客户端工具连接服务器</li></ul><p><code>mysql -uroot -p</code></p><ul><li>输入临时密码进入，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</li></ul><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</code></p><p>这里有个问题，新密码设置的时候如果设置的过于简单会报错；原因是因为MySQL有密码设置的规范，具体是与validate_password_policy的值有关，可以降低密码强度。</p><ul><li><p>密码强度设为最低，长度为6，就可以修改密码了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy&#x3D;0;</span><br><span class="line">set global validate_password_length&#x3D;6;</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure></li><li><p>此时的root用户是没有权限的，接下来创建远程连接用户并赋予用户权限</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><ul><li>刷新权限</li></ul><p><code>flush privileges;</code></p><p><strong>常用命令</strong></p><ul><li>查看服务器版本</li></ul><p><code>select version();</code></p><ul><li>查看当前所有数据库</li></ul><p><code>show databases;</code></p><ul><li>切换到指定数据库</li></ul><p><code>use 数据库名;</code></p><ul><li>查看当前数据库下所有表</li></ul><p><code>show tables;</code></p><ul><li>查看当前使用的数据库</li></ul><p><code>select database();</code></p><ul><li>查看表的结构</li></ul><p><code>desc 表名;</code></p><ul><li>查看当前用户</li></ul><p><code>select user();</code></p><ul><li>查看当前时间</li></ul><p><code>select now();</code></p><ul><li>显示数据库的创建和数据表的创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名;</span><br><span class="line">show create table 数据表名;</span><br></pre></td></tr></table></figure><ul><li>获取帮助</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">? contents;</span><br><span class="line">? functions;</span><br><span class="line">? numeric functions;</span><br><span class="line">? round;</span><br><span class="line"></span><br><span class="line">? data types;</span><br><span class="line">? longblob;</span><br></pre></td></tr></table></figure><h3 id="SQL基本语法"><a href="#SQL基本语法" class="headerlink" title="SQL基本语法"></a>SQL基本语法</h3><p>我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。<br>DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；<br>DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；<br>DCL通常用于授予权限（grant）和召回权限（revoke）。</p><blockquote><p>说明：SQL是不区分大小写的语言；每条SQL语句必须以分号结束</p></blockquote><h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL - 数据定义语言"></a>DDL - 数据定义语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">-- 0. 删除数据库: drop database 数据库名;</span><br><span class="line">DROP DATABASE school;   -- 直接删除指定数据库</span><br><span class="line">DROP DATABASE if EXISTS school;   -- 如果指定的数据库存在就删除数据库</span><br><span class="line"></span><br><span class="line">-- 1.创建数据库: create database 数据库名;</span><br><span class="line">create database school;  -- 直接创建指定数据库</span><br><span class="line"></span><br><span class="line">CREATE database if not EXISTS school;  </span><br><span class="line">-- 当指定数据库不存在的时候才创建数据库</span><br><span class="line"></span><br><span class="line">create database if not EXISTS school default charset utf8;   </span><br><span class="line">-- 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储</span><br><span class="line"></span><br><span class="line">-- 2.使用&#x2F;切换&#x2F;数据库: use 数据库名;</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">-- 3.新建表: create table if not exists 表名(字段名1 类型1, 字段2 类型2,...);</span><br><span class="line">-- 注意： a. 表名一般需要加前缀&#39;t&#39;或者&#39;tb&#39;    </span><br><span class="line"> b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字  </span><br><span class="line"> c.数据类型必须是MySQL支持的数据类型</span><br><span class="line"></span><br><span class="line">-- 常用数据类型: int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期</span><br><span class="line"></span><br><span class="line">CREATE TABLE if not EXISTS t_student(stuid int, stuname varchar(20), gender bit, birth date);  </span><br><span class="line"></span><br><span class="line">-- 新建表并且添加约束: create table if not exists 表名(字段名1 类型1 约束1, 字段2 类型2 约束2,...);</span><br><span class="line"></span><br><span class="line">-- 常见约束: not null - 不为空,  default  - 设置默认值,  unique - 值唯一,  primary key - 主键约束 ， foregin key - 外键约束</span><br><span class="line"></span><br><span class="line">-- 主键约束:  主键的值可以确定列表中唯一一条记录(通过一个主键值可以找到表中的唯一一条记录)</span><br><span class="line"></span><br><span class="line">-- 注意: auto_increment只针对主键有效,并且主键的类型是整型;</span><br><span class="line"></span><br><span class="line">CREATE TABLE if not EXISTS t_student</span><br><span class="line">(</span><br><span class="line">stuid int not null auto_increment, </span><br><span class="line">stuname varchar(20) not null, </span><br><span class="line">gender bit DEFAULT 1, </span><br><span class="line">birth date,</span><br><span class="line">PRIMARY KEY(stuid)  -- 将字段stuid作为当前表的主键（设置主键可以间接约束这个字段的值是唯一的）</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-- 4.删除表: DROP TABLE if EXISTS 表名;</span><br><span class="line">DROP TABLE if EXISTS t_student;  </span><br><span class="line">-- 清空表中的数据: TRUNCATE TABLE 表名;</span><br><span class="line">TRUNCATE TABLE t_student;</span><br><span class="line"></span><br><span class="line">-- 5.修改表</span><br><span class="line">-- 5.1 添加列: alter TABLE 表名 add COLUMN 字段名 字段类型 约束;</span><br><span class="line">alter TABLE t_student add COLUMN score FLOAT(8,2) DEFAULT 0;</span><br><span class="line">alter TABLE t_student add COLUMN addr VARCHAR(100);</span><br><span class="line"></span><br><span class="line">-- 5.2 删除列: alter TABLE 表名 drop COLUMN 字段名;</span><br><span class="line">alter TABLE t_student drop COLUMN gender;</span><br><span class="line"></span><br><span class="line">-- 5.3 修改列: alter TABLE 表名 modify 字段名 字段类型 约束; （不重命名）</span><br><span class="line">--   修改列: alter TABLE 表名 change 原字段名 新字段名 字段类型 约束;（重命名）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--                 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;补充&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 常见数据类型:</span><br><span class="line">-- varchar(size) - 不定长字符串，size决定的是最大长度</span><br><span class="line">-- char(size) - 定长字符 </span><br><span class="line">-- text - 不限长度(最大是255个字符)</span><br><span class="line">-- int&#x2F;tinyint - 整型 (-128~127)</span><br><span class="line">-- FLOAT(size,d)&#x2F;DOUBLE(size,d)  - 小数，size-总长度， d-小数部分长度</span><br><span class="line">-- bit - 布尔，只有0或1</span><br><span class="line">-- date&#x2F;datetime&#x2F;time - 值可以是时间函数的结果，也可以时间字符串；计算或者是比较的时候内部是按时间处理的</span><br></pre></td></tr></table></figure><h4 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML - 数据操作语言"></a>DML - 数据操作语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">-- 1.增(添加数据&#x2F;记录)</span><br><span class="line">-- 1.1插入数据&#x2F;记录: insert into 表名 values(值1, 值2, 值3,....)  - 依次给指定表中的字段赋值</span><br><span class="line">INSERT into t_student VALUES(100, &#39;张三&#39;, 0, &#39;2019-9-23&#39;);</span><br><span class="line"></span><br><span class="line">-- 1.2插入数据&#x2F;记录: insert into 表名(字段名1,字段名2,...) values(值1, 值2,...) -以指定的顺序给指定的字段赋值  </span><br><span class="line">-- 一次插入一条记录</span><br><span class="line">INSERT into t_student(stuname, birth) VALUES(&quot;小花&quot;, date(now()));   </span><br><span class="line"></span><br><span class="line">-- 一次插入多条记录</span><br><span class="line">INSERT into t_student(stuname, birth) VALUES</span><br><span class="line">(&quot;小花&quot;, date(now())),</span><br><span class="line">(&#39;小明&#39;, &#39;2018-9-8&#39;),</span><br><span class="line">(&#39;路飞&#39;, &#39;1999-12-16&#39;),</span><br><span class="line">(&#39;佐助&#39;, &#39;2000-10-12&#39;);</span><br><span class="line"></span><br><span class="line">-- 值的问题: sql中是数字对应的值直接写，字符串需要使用引号引起来，bit类型的值只有0或者1, 时间可以用内容是满足时间格式字符串也可以是通过时间函数获取的值</span><br><span class="line">-- 时间函数: now() - 当前时间  date(now()) - 当前日期   year(now()) - 当前年   month(now()) - 当前月 ....  </span><br><span class="line"></span><br><span class="line">-- 2.删（删除数据&#x2F;记录） </span><br><span class="line">-- delete from 表名;    - 删除指定表中所有记录</span><br><span class="line">DELETE FROM t_student;</span><br><span class="line"></span><br><span class="line">-- delete from 表名 where 条件语句;    - 删除满足条件的记录  </span><br><span class="line">-- SQL中的条件语句: &#x3D;(判断是否相等), &lt;&gt;(不等于,和python中的!&#x3D;功能一样), &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;</span><br><span class="line">DELETE FROM t_student WHERE stuid&#x3D;100;     </span><br><span class="line">-- 删除t_student表中stuid的值等于100的记录  </span><br><span class="line"></span><br><span class="line">DELETE FROM t_student WHERE stuname&#x3D;&#39;小花&#39;;  </span><br><span class="line">-- 删除t_student表中stuname的值等于&#39;小花&#39;的记录</span><br><span class="line"></span><br><span class="line">DELETE FROM t_student WHERE stuid&lt;108;   </span><br><span class="line">-- 删除t_student表中stuid的值小于&#39;小花&#39;的记录  </span><br><span class="line"></span><br><span class="line">-- 3.改(修改数据&#x2F;记录) </span><br><span class="line">-- update 表名 set 字段1&#x3D;新值1, 字段2&#x3D;新值2,...;  - 将指定表中所有行的指定列&#x2F;字段的值赋值为新值</span><br><span class="line">UPDATE t_student set birth&#x3D;&#39;1999-10-1&#39;, gender&#x3D;1;</span><br><span class="line"></span><br><span class="line">-- update 表名 set 字段1&#x3D;新值1, 字段2&#x3D;新值2,... where 条件语句;  -将表中满足条件的行中指定字段的值赋值为新值  </span><br><span class="line">UPDATE t_student set gender&#x3D;0 WHERE stuname&#x3D;&#39;小花&#39;;</span><br><span class="line">-- 通配符%: 表示任意个数的任意字符（包括0个）</span><br><span class="line">UPDATE t_student set birth&#x3D;&#39;2000-01-01&#39; WHERE stuname LIKE &#39;小%&#39;; </span><br><span class="line">-- 修改stuname是以&#39;小&#39;开头的行对应的birth的值</span><br><span class="line">UPDATE t_student set birth&#x3D;&#39;2111-01-01&#39; WHERE stuname LIKE &#39;%小%&#39;;</span><br><span class="line">-- 统配符_: 表示一个任意字符</span><br><span class="line">UPDATE t_student set birth&#x3D;&#39;2444-01-01&#39; WHERE stuname LIKE &#39;小_&#39;;    --  修改stuname只有两个字符，并且第一个字符是‘小’对应的行的birth的值</span><br><span class="line">-- 注意: 通配符只针对字符串有效!  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 4.查(获取数据)</span><br><span class="line">-- 4.1直接查询</span><br><span class="line">-- select * from 表名;            - 获取指定表中所有行和所有的列(所有数据)</span><br><span class="line">SELECT * FROM t_student;</span><br><span class="line"></span><br><span class="line">-- select 字段名1,字段名2,... from 表名;   - 获取指定表中所有行指定的列 </span><br><span class="line">SELECT stuname,stuid FROM t_student;   </span><br><span class="line"></span><br><span class="line">-- select * from 表名 where 条件;         - 获取指定表中所有满足条件的行所有列的数据  </span><br><span class="line">SELECT * FROM t_student WHERE stuid&gt;115;    </span><br><span class="line"></span><br><span class="line">-- 4.2列重命名</span><br><span class="line">-- select 字段1 as 新字段1, 字段2 as 新字段2,... from 表名;</span><br><span class="line">-- 注意： 这儿的as可以省略</span><br><span class="line">SELECT stuid as &#39;学号&#39;, stuname, gender as &#39;性别&#39; FROM t_student;    </span><br><span class="line">-- 对查询结果中的stuid和gender字段进行重命名</span><br><span class="line"></span><br><span class="line">-- 4.3对查询结果重新赋值(一般针对布尔数据)</span><br><span class="line">-- select if(字段名,值1,值2) from 表名;    -查询指定字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2</span><br><span class="line">-- 注意: 这儿的if的用法是MySQL专有的</span><br><span class="line">-- MySQL写法: if(字段, 新值1, 新值2)</span><br><span class="line">SELECT stuname,if(gender,&#39;男&#39;,&#39;女&#39;) as &#39;性别&#39; FROM t_student;    </span><br><span class="line">-- 通用写法:  case 字段 when 值 then 新值1 else 新值2 end</span><br><span class="line">SELECT case gender WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END as &#39;性别&#39; FROM t_student;</span><br><span class="line"></span><br><span class="line">-- 4.4对列进行合并</span><br><span class="line">-- select concat(字段1,字段2,...) from 表名;</span><br><span class="line">SELECT CONCAT(stuname,stuid) as &#39;name_id&#39; FROM t_student;</span><br><span class="line">SELECT CONCAT(stuname,&#39;:&#39;,stuid) as &#39;name_id&#39; FROM t_student;</span><br><span class="line"></span><br><span class="line">-- 注意: 数字和字符串数据可以合并，bit类型的数据不可以合并</span><br><span class="line">-- SELECT CONCAT(stuname,&#39;:&#39;,gender) as &#39;name_id&#39; FROM t_student;   </span><br><span class="line"></span><br><span class="line">-- 4.5模糊查询 - 查询的时候时候通过like条件来指定查询对象</span><br><span class="line">-- sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)</span><br><span class="line">SELECT * FROM t_student WHERE stuname like &#39;%飞%&#39; or not stuid &lt; 110;  </span><br><span class="line"></span><br><span class="line">-- 4.6排序(先按之前的任何语法进行查询在排序)</span><br><span class="line">-- select * from 表名 order by 字段;            - 对查询结果按照指定字段的值进行升序排序 </span><br><span class="line">-- select * from 表名 order by 字段 asc;        - 对查询结果按照指定字段的值进行升序排序 </span><br><span class="line">-- select * from 表名 order by 字段 desc;       - 对查询结果按照指定字段的值进行降序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY gender;      -- 按性别升序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY stuid ASC;   -- 按学号升序排序</span><br><span class="line">SELECT * FROM t_student ORDER BY stuid DESC;  -- 按学号降序排序</span><br><span class="line"></span><br><span class="line">--                  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;补充&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 条件语句的写法:</span><br><span class="line">-- 在SQL中可以通过 &#96;where 条件语句&#96;来对操作对象进行筛选 - 筛选  </span><br><span class="line">-- a. 比较运算符： &#x3D;, &lt;&gt;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;</span><br><span class="line">-- 注意: 判断一个字段的值是否为空不用使用&#x3D;和&lt;&gt;(不等与), 而是使用&#96;is null&#96; 和 &#96;is not null&#96;</span><br><span class="line">SELECT addr FROM t_student;</span><br><span class="line">SELECT stuname FROM t_student WHERE addr is NULL; -- 判断是否为NULL（空）</span><br><span class="line">SELECT stuname FROM t_student WHERE addr&lt;&#x3D;&gt;NULL; -- 判断是否为NULL（空）</span><br><span class="line">SELECT stuname FROM t_student WHERE addr&#x3D;&#39;&#39;;    -- 判断是否是空串</span><br><span class="line">-- b. 逻辑运算符: and, or, not  </span><br><span class="line">-- c. where 字段名  between 值1 and 值2   --  筛选指定的字段的值在值1和值2之间</span><br><span class="line">SELECT stuname,birth FROM t_student WHERE birth BETWEEN &#39;1990-1-1&#39; AND &#39;1999-12-31&#39;;  </span><br><span class="line">-- d. where 字段名 in 集合   -- 筛选出字段值是集合中的元素;(集合是使用括号括起来里面多个值)</span><br><span class="line">SELECT * FROM t_student WHERE stuname in (&#39;小花&#39;, &#39;小明&#39;, &#39;路飞&#39;);  </span><br><span class="line">-- e. like操作</span><br></pre></td></tr></table></figure><h4 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL - 数据控制语言"></a>DCL - 数据控制语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 创建可以远程登录的root账号并为其指定口令</span><br><span class="line">create user &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除用户  - drop user 用户名;</span><br><span class="line">drop user zhangsan;</span><br><span class="line"></span><br><span class="line">-- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; with grant option;</span><br><span class="line"></span><br><span class="line">-- 创建名为hellokitty的用户并为其指定口令</span><br><span class="line">create user &#39;hellokitty&#39;@&#39;%&#39; identified by &#39;123123&#39;;</span><br><span class="line"></span><br><span class="line">-- 将对school数据库所有对象的所有操作权限授予hellokitty</span><br><span class="line">grant all privileges on school.* to &#39;hellokitty&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">-- 召回hellokitty对school数据库所有对象的insert&#x2F;delete&#x2F;update权限</span><br><span class="line">revoke insert, delete, update on school.* from &#39;hellokitty&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关系数据库概述&quot;&gt;&lt;a href=&quot;#关系数据库概述&quot; class=&quot;headerlink&quot; title=&quot;关系数据库概述&quot;&gt;&lt;/a&gt;关系数据库概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>常用linux指令</title>
    <link href="http://yoursite.com/2019/12/21/%E5%B8%B8%E7%94%A8Linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/12/21/%E5%B8%B8%E7%94%A8Linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4/</id>
    <published>2019-12-21T08:56:03.636Z</published>
    <updated>2019-12-27T05:47:27.569Z</updated>
    
    <content type="html"><![CDATA[<p>命令名称 [命名参数] [命令对象]</p><h4 id="一、日常操作"><a href="#一、日常操作" class="headerlink" title="一、日常操作"></a>一、日常操作</h4><p>1.cd指令           -         进入指定文件夹</p><p>cd  目录             -         进入指定目录(也可以是文件夹对应的路径)</p><p>​                               ~相对路径 — 绝对路径</p><p>cd  ..           -         返回上层目录</p><p>cd  ~            -         回到根目录</p><p>cd  /           -         进入系统根目录</p><p>\2. ls指令              -             查看当前目录中的内容</p><p>ls</p><p>ls  -l/-lh                 -             查看详情</p><p>ls -a                       -             隐藏文件也一起显示</p><p>ls -R                       -             递归显示所有内容</p><p>ls -S/-t                   -              按大小/时间排序</p><p>注意: 多个功能不冲突的参数可以同时使用，中间用空格隔开, 例如 -  (ls -lh -S)</p><p>3.pwd指令             -         显示当前完整目录</p><p>pwd</p><p>4.文件操作指令</p><p>touch  文件名            -         新建文件</p><p>cat 文件名                  -         查看文件内容</p><p>vim/vi  文件名            -         打开文件</p><p>rm    文件名                        -         删除文件(询问是否删除)</p><p>rm -f  文件名                      -         强制删除文件(不询问)</p><p>rm - r 目录                         -         删除文件夹</p><p>rm -rf   目录、 rm -r  -f 目录       -          删除文件夹(不询问)</p><p>cp  文件名1  文件名2                    -             将文件1中的内容拷贝到文件2中</p><p>cp  文件  目录                                -              将指定文件拷贝到指定目录中</p><p>cp -r  文件名/目录名   目录2        -             将文件/目录拷贝到目录2中</p><p>mv    文件名1  文件名2                -         将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）</p><p>mv  文件1路径   文件2路径</p><p>mv 文件名1  新文件名                -           重命名</p><p>mv    文件名1  文件目录                -         将文件1移动到指定目录中  </p><p>注意: mv指令不能加-r来操作目录</p><p>(注意：cp/mv/rm 后面可以跟：     -i询问  -f强制  -n不覆盖)</p><p>mkdir  目录名                            -              新建文件夹</p><p>mkdir -p a/b/c                           -             按层级创建a,b,c三个文件夹</p><p>mkdir -p a/{b,c}/{d,e,f}            -              同一层级常见多个</p><p>rmdir  目录名                    -         删除指定空目录</p><p>7.history                        -             显示历史指令记录</p><p>根目录下bashrc 配置显示时间：    export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ </p><p>修改bashrc 后使其生效:      source ~/.bashrc  或 .  .bashrc   </p><p>6.链接</p><p>ln -s 源路径  目标路径            -         给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)</p><p>ln 源路径  目标路径                -         给源路径对应的文件在目标路径下创建一个硬链接(看成一个数据的多个引用)（了解）</p><p>注意: 源文件不存在的时候，软链接直接无效，硬链接变成普通文件</p><p>8.快捷键</p><p>ctrl + f         -     前进一个字符</p><p>ctrl + b        -     后退一个字符</p><p>ctrl + a        -     回到行首</p><p>ctrl + e        -     回到行尾</p><p>ctrl + w        -     向左删除一个单词</p><p>ctrl + u        -     向左删除全部</p><p>ctrl + k        -     向右删除全部</p><p>ctrl + y        -     粘贴上次删除的内容</p><p>ctrl + l         -     清屏  </p><p>ctrl + d        -    结束输入</p><p>ctrl + z         -    暂停命令放到后台</p><p>ctrl + c         -     退出任务</p><p>date            -    查看当前时间</p><p>init 6~0       -    重启6 关机0</p><p>shutdown     -    关闭服务器</p><ul><li>-c  取消关机</li><li>-r  重启</li><li>-h  定小时关机</li></ul><h4 id="二、进程相关指令"><a href="#二、进程相关指令" class="headerlink" title="二、进程相关指令"></a>二、进程相关指令</h4><p>1.ps指令</p><p>ps                                             -         进程状态</p><p>ps -aux  或者  ps ex              -         查看进程</p><p>ps -aux|grep 进程名            -         查看指定进程</p><p>ps grep  进程ID</p><p><a href="http://2.top" target="_blank" rel="noopener">2.top</a>指令</p><p>top                                         -         动态监控进程</p><p>top  -p PID1,PID2,….            -         动态监控指定进程</p><p>3.free指令</p><p>free -单位                                -         以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！</p><p>4.kill指令</p><p>kill 进程号                                    -         杀死指定的进程</p><p>kill -1/-9/-15 进程号                    -         -1(HUP)不间断重启，-9(KILL)强制杀死进程, -15(TERM)正常终止进程  </p><p>pkill  进程名                                -         按名字处理进程</p><p>killall 进程名                                -         处理名字匹配的进程</p><p>5.uptime                                    -         查看系统状态</p><h4 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h4><p>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)</p><p>users                     -         查看当前用户</p><p>groups                 -         查看当前分组</p><p>groupadd  分组名                    -         添加分组   (能在/etc/group文件中查看到新的分组, root才有的权限)</p><p>useradd  用户名                    -         创建新的用户(还是在home中自动创建这个用户对应的文件夹， root才有的权限)</p><p>useradd    ‐G    分组名    ‐m ‐s /bin/bash 用户名        -         创建一个用户添加到指定的分组中(在home创建相应的文件夹)</p><p>usermod    -G     分组名     用户名                    -         修改分组(root才有的权限)</p><p>passwd    用户名                            -         修改密码（root才有权限）</p><p>passwd                                            -         修改当前账号密码</p><p>su  用户名                                -         切换用户身份(root不需要密码，其他用户需要密码)</p><p>sudo                                        -         以管理员执行其他程序</p><p>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序</p><p>​          b.在centOS中需要先执行vi 指令进入/etc/sudoers文件中在指定的位置添加内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">xiaoming ALL=(ALL)      ALL# 自己添加的，xiaoming是用户名</span><br></pre></td></tr></table></figure><p>2.chmod(记住！) </p><p>chmod       权限值   文件                    -         修改指定文件的权限</p><p>chmod    [a,u,g,o][+,-][r,w,x]  文件            -         指定文件，给所有用户添加相应的权限</p><p>​                                                                      (a:所有，u:自己，g:同组，o:其他；</p><p>​                                                                    +:添加， - :取消；  r:读，w:写，x:执行)</p><p>chown  用户名     文件                -                 改变文件所有者</p><p>(权限制是三组二进制值)</p><p>self      group    other</p><p>rwx      rwx        rwx</p><p>111       101        001                -         自己读写可执行，同一分组的只读可执行，其他的只可执行</p><p>110      100        000</p><p>chmod      644      文件</p><p>chmod      777       文件</p><p>chmod     666        文件</p><h4 id="四、日志管理"><a href="#四、日志管理" class="headerlink" title="四、日志管理"></a>四、日志管理</h4><p>1.cat指令</p><p>cat       文件                -         查看文件内容</p><p>cat    -n    文件            -            查看文件内容，并且显示行号</p><p>2.查看部分</p><p>head   N  文件        -         查看前N行内容</p><p>tail    N    文件         -         查看后N行内容</p><p>3.</p><p>less  文件</p><p>​    -     按 j 向下</p><p>​    -     按 k 向上</p><p>​    -     按 f 向下翻屏</p><p>​    -     按b 向上翻屏</p><p>​    -     按 g 到全文开头</p><p>​    -     按 G 到全文结尾</p><p>​    -     按 Q 退出  </p><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载</p><ol start="4"><li>处理(对通过其他指令获取的结果进行处理)</li></ol><p>sort                  -         排序  (cat 文件 |sort)</p><p>uniq                -         去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $N&#125;'# 打印第N列的内容 (例如：netstat -natp|awk '&#123;print $4&#125;')</span><br><span class="line"></span><br><span class="line">awk '&#123;print $N1,$N2,$N3,…&#125;'</span><br><span class="line"></span><br><span class="line">history |awk '&#123;print $4&#125;' |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3   # 获取历史指令中，使用最频繁的三个指令</span><br></pre></td></tr></table></figure><p>uniq ‐c       -去重的时候统计每一行内容的重复出现的次数</p><p>sort -nk 1    - 数值大小从小到大排序</p><p>sort -nk 2   - 字符大小从小到大排序(默认)</p><p>sort -rnk 1    - 数值大小从大到小排序</p><p>sort -rnk 2   - 字符大小从大到小排序(默认)</p><p>5.重定向</p><p>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）</p><p>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>5.统计  </p><p>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找</p><p>grep  查看对象    目录/文件  参数</p><p>​    </p><p>​    参数：</p><p>​        -i        忽略大小写:         grep you bb.txt   -i</p><p>​        -n       显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n</p><p>​        -E       通过正则表达式匹配:     grep -E  ‘正则表达式’  文件</p><p>​                注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B</p><p>​                                           支持：.   +, *, ?, {N,M}, [], ^, $</p><p>​        -v       忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)</p><p>​                        grep -E  ‘[0-9]+.[0-9]+’  abb.txt  -v</p><p>​        -rn  递归查找目录，并打印行号</p><p>​        grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)</p><p>​                        </p><p>​        // 对文件格式进行约束</p><p>​        —include=‘<em>.py’    仅包含 py文件: grep -r you ./ –include=‘</em>.txt’</p><p>​        —exclude=‘<em>.js’    不包含 js 文件: grep -r you ./ –exclude=’</em>.c’</p><p>​    例如：</p><p>​        grep you bb.txt  </p><p>​        grep you bb.txt -i</p><p>​        grep you bb.txt -i -n</p><p>​        grep -E ‘[0-9]+’ bb.txt </p><p>//  在文件夹下找满足条件的文件</p><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><p>find 路径  -size  +/-文件大小      例如: find ./  +20k  (在当前目录下找文件大小大于20k的文件)</p><p>​    例：find ./ -size +20k -size -100k -name ‘*.txt’   (找当前目录下大于20k并且小于100k的所有txt文件)</p><p>// 查指令</p><p>which  指令            -         精确查找当前可执行的指令</p><p>whereis  指令        -         查找所有匹配的命令</p><p>man 指令               -        使用指令手册</p><h4 id="五、网络管理"><a href="#五、网络管理" class="headerlink" title="五、网络管理"></a>五、网络管理</h4><p>ifconfig                                 -    查看网卡状态</p><p>netstat   -natp                    -     查看网络连接状态</p><p>netstat   -natp|grep  端口号            -     查看指定端口的网络连接状态    </p><p>ping  地址 </p><p>ping  -i   时间    地址</p><p>ping  -c  次数    地址</p><p>route                                        -        显示路由表</p><p>telnet  ip地址    端口             -         查看远程主机网络连接状况（需要telnet环境）</p><p>dig 地址                            -         查看DNS   (需要环境支持)</p><h4 id="六、使用包管理工具-掌握"><a href="#六、使用包管理工具-掌握" class="headerlink" title="六、使用包管理工具(掌握)"></a>六、使用包管理工具(掌握)</h4><h5 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h5><p>yum     (CentOS)</p><ul><li>yum search：搜索软件包，例如yum search nginx。</li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。</li><li>yum install：安装软件包，例如yum install nginx。</li><li>yum remove / yum erase：删除软件包，例如yum remove nginx。</li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。</li><li>yum check-update：检查有哪些可以更新的软件包。</li><li>yum info ：显示软件包的相关信息，例如yum info nginx。</li></ul><p>rpm        (Redhat)</p><ul><li><p>rpm -ivh        安装</p></li><li><p>rpm -e           卸载软件包</p></li><li><p>rpm -qa        查询所有已安装的软件包</p></li></ul><p>  <strong>参数：</strong><br>  -i    安装软件包</p><p>  -v    可视化，提供更多的详细信息的输出</p><p>  -h    显示安装进度</p><p>  -a    查询所有已经安装的软件包</p><p>  -f    查询文件所属于的软件包</p><p>  -q    查询软件包（通常用来看下还未安装的软件包）</p><p>  -l    显示软件包的文件列表</p><p>  -d    显示被标注为文档的文件列表</p><p>  -c    显示被标注为配置文件的文件列表 最后这两个用的很少了</p><p>apt        (Ubuntu)</p><ul><li><p>apt-cache search              ——（package 搜索包）</p><ul><li>apt-cache show                 ——（package 获取包的相关信息，如说明、大小、版本等）</li></ul></li><li><p>sudo apt-get install          ——（package 安装包）</p></li><li><p>sudo apt-get reinstall          ——（package - - reinstall 重新安装包）</p></li><li><p>sudo apt-get -f install         ——（强制安装?#”-f = –fix-missing”当是修复安装吧…）</p></li><li><p>sudo apt-get remove         ——（package 删除包）</p></li><li><p>sudo apt-get remove –purge          ——（package 删除包，包括删除配置文件等）</p></li><li><p>sudo apt-get update             ——更新源</p></li><li><p>sudo apt-get upgrade             ——更新已安装的包</p></li></ul><h5 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h5><ol><li>wget  安装包的路径        -下载安装包</li><li>gunzip/tar  压缩包         - 解压、解归档</li><li>(设置安装路径)</li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li></ol><p>安装Redis官方最新版:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line">gunzip redis-5.0.7.tar.gz</span><br><span class="line">tar -xvf redis-5.0.7.tar</span><br><span class="line">cd redis-5.0.7</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装Git官方最新版:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.24.1.tar.xz</span><br><span class="line">xz -d git-2.24.1.tar.xz</span><br><span class="line">tar -xf git-2.24.1.tar</span><br><span class="line">cd git-2.24.1</span><br><span class="line">yum install -y curl libcurl-devel</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong> / <strong>tar</strong></p><p> 1）归档和解归档        -        tar<br>        tar    -cvf                            归档文件地址需要归档的原文件地址-将文件进行归档操作（既可以对文件进行归档                                            也可以对文件夹归档）<br>        tar    -xvf                             归档文件地址-将指定的归档文件解归档</p><p>2）压缩和解压：gzip.gunzip.xz</p><p>a.    gzip<br>gzip  文件地址                                                -        压缩指定文件（压缩后会生成一个gz文件，并且会删除原文件）<br>gzip    -c  文件地址  &gt;  压缩文件地址                -    将指定文件压缩指定位置，并且保留原文件<br>gzip    -d  压缩文件地址                                -        解压指定文件（解压完成后会删除原压缩文件）<br>gzip    -l  压缩文件地址                                -        列出压缩文件中的内容</p><p>b.    gunzip</p><p>gunzip    压缩文件地址                            -        解压指定文件（解压完成后悔删除原压缩文件）</p><p>c.    xz</p><p>xz    文件地址                                        -        压缩指定文件（压缩后文件后缀是xz）</p><p>xz    -d    压缩文件地址                        -        解压指定文件</p><h4 id="七、远程文件传输"><a href="#七、远程文件传输" class="headerlink" title="七、远程文件传输"></a>七、远程文件传输</h4><ol><li>通过网络获取资源：wget &lt;获取资源的url&gt;</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>后台下载模式：-b</span><br><span class="line"><span class="bullet">- </span>下载到指定的目录：-O</span><br><span class="line"><span class="bullet">- </span>递归下载：-r</span><br><span class="line"><span class="bullet">- </span>发送和接受邮件：email</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安全文件传输：sftp</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sftp</span> root@<span class="number">118.31.103.87</span></span><br><span class="line">root@<span class="number">118.31.103.87</span><span class="string">'s passward:</span></span><br><span class="line"><span class="string">stfp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>：显示帮助信息。</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="regexp">/lls：显示远端/</span>本地目录列表。</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span>/<span class="keyword">lcd</span>：切换远端/本地路径。</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>/lmkdir：创建远端/本地目录。</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd<span class="regexp">/lpwd：显示远端/</span>本地当前工作目录。</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>：下载文件。</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">put</span>：上传文件；<span class="keyword">put</span> &lt;文件名&gt; &lt;路径&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rm</span>：删除远端文件。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bye</span>/<span class="built_in">exit</span>/quit：退出sftp。</span><br></pre></td></tr></table></figure></li><li><p>远程安全文件拷贝 ：scp</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp &lt;文件名&gt; root@&lt;主机&gt;:路径 也能实现文件传输</span><br><span class="line">例如：</span><br><span class="line">scp hello.txt root@120.77.222.217:/root/abc.txt</span><br><span class="line">拷贝多个</span><br><span class="line">scp hellokitty@1.2.3.4:/home/hellokitty/index.html root@4.3.2.1:/usr/share/sohu.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令名称 [命名参数] [命令对象]&lt;/p&gt;
&lt;h4 id=&quot;一、日常操作&quot;&gt;&lt;a href=&quot;#一、日常操作&quot; class=&quot;headerlink&quot; title=&quot;一、日常操作&quot;&gt;&lt;/a&gt;一、日常操作&lt;/h4&gt;&lt;p&gt;1.cd指令           -         进
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
